#define SpeedSlow 10
#define SpeedFast 50 // Depends on how narrow the curves are, the narrower, the quicker
#define tolerance 40 // Value of the brightest spot on the line + some security margin (+5 is feasible)
#define followSide false // True to follow right side of the line, false for left side
#define distance 20 // Desired distance to wall while following it

int iLight = 0;
int iDistance = 0;
long lLastSeen = 0;

void followLine() {
     if (followSide) {
        if (iLight > tolerance) { // If not on the line go left
           OnFwd(OUT_A, SpeedFast);
           OnFwd(OUT_B, SpeedSlow);
        }
        else {
             OnFwd(OUT_B, SpeedFast); // If on the line go right
             OnFwd(OUT_A, SpeedSlow);
             lLastSeen = CurrentTick();
        }
     }
     else {
          if (iLight > tolerance) { // If not on the line go right
             OnFwd(OUT_A, SpeedSlow);
             OnFwd(OUT_B, SpeedFast);
          }
          else {
               OnFwd(OUT_B, SpeedSlow); // If on the line go left
               OnFwd(OUT_A, SpeedFast);
               lLastSeen = CurrentTick();
          }
     }
}

void Liner() {
     bool bWalled = false;
     lLastSeen = CurrentTick();

     while (!bWalled) {
           iLight = Sensor(IN_2);
           iDistance = SensorUS(IN_4);

           if (iDistance < 20 ) {
              bWalled = true;
           }

           if (CurrentTick() - lLastSeen > 250) {
              while (iLight > tolerance) {
                    if (followSide) { // When following right side, turn right
                       OnFwdSync(OUT_AB, 50, 100);
                    }
                    else { // When following left side, turn left
                         OnFwdSync(OUT_AB, 50, -100);
                    }
                    iLight = Sensor(IN_2);
              }
              Off(OUT_AB);
              lLastSeen = CurrentTick();
           }
           else {
                followLine();
           }
     }
}

void Waller() {
     bool bEnd = false;
     
     while (!bEnd) {
           iDistance = SensorUS(IN_4);
           if (iDistance < distance) { // Go left if too close
              OnFwd(OUT_A, SpeedFast);
              OnFwd(OUT_B, SpeedSlow);
              Wait(500);
              lLastSeen = CurrentTick();
           }
           else { // Go right if too far away
                OnFwd(OUT_B, SpeedFast);
                OnFwd(OUT_A, SpeedSlow);
                if (CurrentTick() - lLastSeen > 2000) {
                   bEnd = true;
                }
           }
     }
}

task main() {
     SetSensorLight(IN_2);
     SetSensorLowspeed(IN_4);
     
     Liner();
     
     PlayTone(2000, 300);
     Wait(300);
     
     Waller();
     
     Off(OUT_AB);
     
     PlayTone(2000, 300);
     Wait(300);
     
     OnFwdSync(OUT_AB, 100, 0);
     Wait(500);
     Off(OUT_AB);
     
     PlayTone(500, 800);
     Wait(800);
}
